#!/bin/bash

Usage () { cat 1>&2 <<EOF
Usage: $0 zip_or_rar_or_dir [...]
EOF
}

if [ $# -lt 1 -o ! -e "$1" ] ; then
  Usage
  exit 2
fi

plerf () {
  shopt -s nullglob
  echo '<link rel="stylesheet" href="_.css" />' > "$1".html
  python3 _plerf.py "$1"/*.png "$1"/*.jpg >> "$1".html
}

set -e

guess_archive_type () {
  if [ -d "$1" ] ; then
    echo dir ; return
  fi

  case "$1" in
    *.rar)
      echo rar ; return
      ;;
    *.zip)
      echo zip ; return
      ;;
    *)
      case "$( file -b -- "$1" )" in
        Zip\ archive\ data*)
          echo zip ; return
          ;;
        RAR\ archive\ data*)
          echo rar ; return
          ;;
      esac
  esac
  echo unknown ; return
}


determine_plerf_target_for_dir () {
  echo "$1"
}

determine_plerf_target_for_rar () {
  local archive=$1
  local paths=$( unrar lb "$archive" )
  case "$paths" in
    */*)
      printf '%s' "$paths" | sed -e 's#/.*$##' | sort | uniq
      ;;
    *)
      basename "$archive" .rar
      ;;
  esac
}

extract_rar () {
  unrar x -- "$1"
}

determine_plerf_target_for_zip () {
  local archive=$1
  local base=$( basename "$archive" .zip )
  local outdirs=$( unzip -l "$archive" \
    | sed -n -e 's,^[ ]*[0-9]*  [0-9][0-9]-[0-9][0-9]-[0-9][0-9]* [0-9][0-9]:[0-9][0-9]   ,,p' \
    | sed -e 's,[^/]*$,/,' \
    | uniq )
  local outdir=${outdirs%//}
  if [ "$outdirs" = / ] ; then
    outdir=${base}
  elif [ "$( echo " $outdirs" | wc -l )" -gt 1 ] ; then
    outdir=${base}
  elif [ "$outdirs" = "$outdir" ] ; then
    echo 1>&2 "Unexpected condition for: $archive"
    declare 1>&2 -p outdir outdirs
    exit 3
  else
    : Archive contains one top-level folder
  fi
  echo "$outdir"
}

extract_zip () {
  open -W -n "$1"
}


for archive; do
  archive_type=$( guess_archive_type "$archive" )
  if [ "$archive_type" = unknown ] ; then
    cat 1>&2 <<EOF
Error: Unrecognized archive: $archive
(Expected zip, rar, or directory)
EOF
    exit 1
  fi

  plerf_target=$( determine_plerf_target_for_${archive_type} "$archive" )
  if ! [ -d "$plerf_target" ] ; then
    extract_${archive_type} "$archive"
  fi

  plerf "$plerf_target"
done
